Aqui vão algumas explicações em relação aos códigos

# No ghost.js:

O algoritmo de perseguição dos fantasmas neste código é baseado em busca em largura (BFS - Breadth-First Search). O objetivo é que os fantasmas persigam o Pacman quando estiverem dentro de um determinado alcance e se movam aleatoriamente quando estiverem fora desse alcance.

Aqui está uma explicação passo a passo do algoritmo de perseguição:

### isInRange():
Este método calcula a distância entre o fantasma e o Pacman. Se a distância estiver dentro de um determinado alcance (this.range), o fantasma considera que o Pacman está dentro de seu alcance de visão e retorna verdadeiro, indicando que ele deve perseguir o Pacman. Caso contrário, retorna falso, indicando que o fantasma deve se mover aleatoriamente.

### moveProcess():
Este método controla o processo de movimento do fantasma. Se o Pacman estiver dentro do alcance de visão do fantasma, ele define o Pacman como seu alvo (this.target) e tenta persegui-lo. Caso contrário, o fantasma se move aleatoriamente.
Ele também verifica se há colisões após cada movimento e ajusta o movimento se uma colisão for detectada.

### calculateNewDirection():
Este método implementa o algoritmo de busca em largura para calcular a nova direção do movimento do fantasma em direção ao Pacman.
Ele inicia uma busca a partir da posição atual do fantasma e se espalha por todas as direções possíveis até encontrar o Pacman. O primeiro caminho encontrado é retornado como a nova direção de movimento.

### addNeighbors():
Este método adiciona os vizinhos do nó atual à fila de busca durante a busca em largura.